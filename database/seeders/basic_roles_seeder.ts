import { BaseSeeder } from '@adonisjs/lucid/seeders'
import Role from '#models/role'
// import Permission from '#models/permission' // Unused import
import TypePersonnel from '#models/type_personnel'

export default class extends BaseSeeder {
  async run() {
    console.log('  üîê Seeding basic roles...')
    
    // R√©cup√©rer les types de personnel
    const typePersonnels = await TypePersonnel.all()
    console.log(`Found ${typePersonnels.length} personnel types`)

    // Cr√©er les r√¥les syst√®me de base (sans metadata ni conditions JSON)
    const roles = await Role.createMany([
      {
        tenantId: null,
        name: 'sage_femme_junior',
        displayName: 'Sage-femme Junior',
        description: 'R√¥le pour sage-femme d√©butante',
        level: 1,
        isSystem: true,
        isMedical: true,
        isAdministrative: false,
        typePersonnelId: typePersonnels.find(tp => tp.name === 'sage_femme_junior')?.id || null,
        maxUsers: null,
        isActive: true,
        isAssignable: true
      },
      {
        tenantId: null,
        name: 'sage_femme',
        displayName: 'Sage-femme',
        description: 'R√¥le pour sage-femme confirm√©e',
        level: 2,
        isSystem: true,
        isMedical: true,
        isAdministrative: false,
        typePersonnelId: typePersonnels.find(tp => tp.name === 'sage_femme')?.id || null,
        maxUsers: null,
        isActive: true,
        isAssignable: true
      },
      {
        tenantId: null,
        name: 'sage_femme_senior',
        displayName: 'Sage-femme Senior',
        description: 'R√¥le pour sage-femme senior',
        level: 3,
        isSystem: true,
        isMedical: true,
        isAdministrative: false,
        typePersonnelId: typePersonnels.find(tp => tp.name === 'sage_femme_senior')?.id || null,
        maxUsers: null,
        isActive: true,
        isAssignable: true
      },
      {
        tenantId: null,
        name: 'gyneco_obstetricien',
        displayName: 'Gyn√©co-obst√©tricien',
        description: 'M√©decin gyn√©co-obst√©tricien',
        level: 4,
        isSystem: true,
        isMedical: true,
        isAdministrative: false,
        typePersonnelId: typePersonnels.find(tp => tp.name === 'gyneco_obstetricien')?.id || null,
        maxUsers: null,
        isActive: true,
        isAssignable: true
      },
      {
        tenantId: null,
        name: 'medecin_generaliste',
        displayName: 'M√©decin G√©n√©raliste',
        description: 'M√©decin g√©n√©raliste',
        level: 2,
        isSystem: true,
        isMedical: true,
        isAdministrative: false,
        typePersonnelId: typePersonnels.find(tp => tp.name === 'medecin_generaliste')?.id || null,
        maxUsers: null,
        isActive: true,
        isAssignable: true
      },
      {
        tenantId: null,
        name: 'pediatre',
        displayName: 'P√©diatre',
        description: 'M√©decin p√©diatre',
        level: 3,
        isSystem: true,
        isMedical: true,
        isAdministrative: false,
        typePersonnelId: typePersonnels.find(tp => tp.name === 'pediatre')?.id || null,
        maxUsers: null,
        isActive: true,
        isAssignable: true
      },
      {
        tenantId: null,
        name: 'infirmier',
        displayName: 'Infirmier/√®re',
        description: 'Personnel infirmier',
        level: 2,
        isSystem: true,
        isMedical: true,
        isAdministrative: false,
        typePersonnelId: typePersonnels.find(tp => tp.name === 'infirmier')?.id || null,
        maxUsers: null,
        isActive: true,
        isAssignable: true
      },
      {
        tenantId: null,
        name: 'directeur_medical',
        displayName: 'Directeur M√©dical',
        description: 'Directeur m√©dical',
        level: 4,
        isSystem: true,
        isMedical: true,
        isAdministrative: true,
        typePersonnelId: typePersonnels.find(tp => tp.name === 'directeur_medical')?.id || null,
        maxUsers: 1,
        isActive: true,
        isAssignable: true
      },
      {
        tenantId: null,
        name: 'super_admin',
        displayName: 'Super Administrateur',
        description: 'Super administrateur syst√®me',
        level: 5,
        isSystem: true,
        isMedical: false,
        isAdministrative: true,
        typePersonnelId: null,
        maxUsers: 5,
        isActive: true,
        isAssignable: true
      }
    ])

    console.log(`‚úÖ Created ${roles.length} roles successfully`)

    // Afficher un r√©sum√©
    const medical = roles.filter(r => r.isMedical && !r.isAdministrative).length
    const administrative = roles.filter(r => r.isAdministrative && !r.isMedical).length
    const mixed = roles.filter(r => r.isMedical && r.isAdministrative).length
    
    console.log('üìà R√©sum√© des r√¥les:')
    console.log(`   - M√©dicaux: ${medical}`)
    console.log(`   - Administratifs: ${administrative}`)
    console.log(`   - Mixtes: ${mixed}`)
    
    console.log('‚ÑπÔ∏è  Note: Permissions role assignments skipped to avoid JSON serialization issues')
  }
}