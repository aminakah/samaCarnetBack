import { BaseSeeder } from '@adonisjs/lucid/seeders'
import VaccineSchedule from '#models/vaccine_schedule'
import { DateTime } from 'luxon'
import { v4 as uuidv4 } from 'uuid'
import VaccineType from '#models/vaccine_type'
import Patient from '#models/patient'
import Personnel from '#models/personnel'

export default class VaccineSchedulesSeeder extends BaseSeeder {
  async run() {
    console.log('  üìÖ Seeding vaccine schedules...')
    
    // Get existing data
    const vaccineTypes = await VaccineType.query()
    const patients = await Patient.query()
    const personnel = await Personnel.query()
    console.log(`Found ${vaccineTypes.length} vaccine types, ${patients.length} patients, ${personnel.length} personnel`)
    if (vaccineTypes.length === 0 || patients.length === 0 || personnel.length === 0) {
      console.log('‚ö†Ô∏è  Skipping vaccine schedules - missing required data')
      return
    }
    
    const schedules = [
      // Calendrier VAT pour A√Øcha Ndiaye (Grossesse)
      {
        tenantId: 1,
        patientId: patients[0]?.id || 1,
        vaccineTypeId: vaccineTypes[0]?.id || 1,
        assignedProviderId: personnel[0]?.id || 1,
        scheduledDate: DateTime.now().plus({ days: 7 }),
        dueDate: DateTime.now().plus({ days: 14 }),
        doseNumber: 1,
        isBooster: false,
        status: 'scheduled' as const,
        priority: 'high' as const,
        notes: 'Premi√®re dose VAT pendant la grossesse √† 20 SA. Patiente inform√©e de l\'importance.',
        nextReminderDate: DateTime.now().plus({ days: 5 }),
        reminderSent: false,
        reminderCount: 0,
        autoGenerated: false,
        canCoAdminister: true,
        isMandatory: true,
        syncId: uuidv4(),
        version: 1,
        createdBy: 1,
        isSynced: false
      },
      {
        tenantId: 1,
        patientId: patients[0]?.id || 1,
        vaccineTypeId: vaccineTypes[0]?.id || 1,
        assignedProviderId: personnel[0]?.id || 1,
        scheduledDate: DateTime.now().plus({ weeks: 5 }),
        dueDate: DateTime.now().plus({ weeks: 5, days: 7 }),
        doseNumber: 2,
        isBooster: false,
        status: 'scheduled' as const,
        priority: 'high' as const,
        notes: 'Deuxi√®me dose VAT (4 semaines apr√®s la premi√®re) √† 24 SA. Compl√©ter protection maternelle et n√©onatale.',
        nextReminderDate: DateTime.now().plus({ weeks: 4, days: 5 }),
        reminderSent: false,
        reminderCount: 0,
        autoGenerated: false,
        canCoAdminister: true,
        isMandatory: true,
        syncId: uuidv4(),
        version: 1,
        createdBy: 1,
        isSynced: false
      },

      // Calendrier VAT pour Khadija Thiam (compl√©t√©)
      {
        tenantId: 1,
        patientId: patients[1]?.id || 2,
        vaccineTypeId: vaccineTypes[0]?.id || 1,
        assignedProviderId: personnel[0]?.id || 1,
        scheduledDate: DateTime.now().minus({ weeks: 8 }),
        dueDate: DateTime.now().minus({ weeks: 8 }).plus({ days: 7 }),
        doseNumber: 1,
        isBooster: false,
        status: 'completed' as const,
        priority: 'high' as const,
        notes: 'Premi√®re dose VAT administr√©e √† 24 SA. Patiente bien inform√©e.',
        nextReminderDate: DateTime.now().minus({ weeks: 8, days: 2 }),
        reminderSent: false,
        reminderCount: 0,
        autoGenerated: false,
        canCoAdminister: true,
        isMandatory: true,
        syncId: uuidv4(),
        version: 1,
        createdBy: 1,
        isSynced: true
      }
    ]

    // Create schedules
    for (const schedule of schedules) {
      try {
        await VaccineSchedule.create(schedule)
      } catch (error) {
        console.log(`‚ö†Ô∏è  Skipped duplicate schedule for patient ${schedule.patientId}`)
      }
    }

    console.log('‚úÖ Vaccine schedules seeded successfully')
  }
}